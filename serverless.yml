service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  environment:
    TODO_TABLE: TodosTable
    INDEX_NAME: OwnerIndex
    BUCKET_NAME: todo-attachments-bucket-pnshiralkar

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

functions:

  RS256Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):dynamodbGetItem}
      - ${file(serverless-iam-roles.yml):dynamodbQuery}


  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):dynamodbPutItem}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):dynamodbUpdateItem}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):dynamodbDeleteItem}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - ${file(serverless-iam-roles.yml):dynamodbUpdateItem}
      - ${file(serverless-iam-roles.yml):s3PutObject}

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: ownerId
            AttributeType: S
        KeySchema:
          - AttributeName: ownerId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        TableName: ${self:provider.environment.TODO_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: ownerId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentStorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*'
        Bucket: !Ref AttachmentStorageBucket